<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .bashrc, | Full Stack Snacks]]></title>
  <link href="http://MProuts.github.io/blog/categories/dot-bashrc/atom.xml" rel="self"/>
  <link href="http://MProuts.github.io/"/>
  <updated>2014-11-25T18:18:11-08:00</updated>
  <id>http://MProuts.github.io/</id>
  <author>
    <name><![CDATA[Michael Prouty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load .secrets from .bashrc]]></title>
    <link href="http://MProuts.github.io/blog/2014/09/18/load-secrets-from-bashrc/"/>
    <updated>2014-09-18T15:44:28-07:00</updated>
    <id>http://MProuts.github.io/blog/2014/09/18/load-secrets-from-bashrc</id>
    <content type="html"><![CDATA[<p>Your shell resource file is a great place to set local environment
variables for use in development (things like API keys, etc.) &mdash; that is,
until you decide to check it into source control.</p>

<p><strong>Solution</strong>:
Toss those variable assignments into a file called <code>.secrets</code> and use the shell
command <code>source</code> to pull them into your environment when the resource
file gets loaded.</p>

<h3>.secrets</h3>

<p><code>sh
export AWS_ACCESS_KEY_ID=imnottellingimnottelling
export AWS_SECRET_ACCESS_KEY=myfavoritefoodissushi
</code></p>

<h3>.bashrc</h3>

<p><code>sh
source ~/.secrets
</code></p>

<p>And now you can safely push your <code>.bashrc</code> up to Github.</p>

<p>&hellip;after you create a little repo for your <a href="/blog/2014/02/04/manage-your-dotfiles-with-git/">dotfiles</a>, that is! ;)</p>
]]></content>
  </entry>
  
</feed>
