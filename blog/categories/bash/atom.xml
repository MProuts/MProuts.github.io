<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash, | Full Stack Snacks]]></title>
  <link href="http://MProuts.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://MProuts.github.io/"/>
  <updated>2014-11-17T13:29:27-05:00</updated>
  <id>http://MProuts.github.io/</id>
  <author>
    <name><![CDATA[Michael Prouty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load .secrets from .bashrc]]></title>
    <link href="http://MProuts.github.io/blog/2014/09/18/load-secrets-from-bashrc/"/>
    <updated>2014-09-18T18:44:28-04:00</updated>
    <id>http://MProuts.github.io/blog/2014/09/18/load-secrets-from-bashrc</id>
    <content type="html"><![CDATA[<p>Your shell resource file is a great place to set local environment
variables for use in development (things like API keys, etc.) &mdash; that is,
until you decide to check it into source control.</p>

<p><strong>Solution</strong>:
Toss those variable assignments into a file called <code>.secrets</code> and use the shell
command <code>source</code> to pull them into your environment when the resource
file gets loaded.</p>

<h3>.secrets</h3>

<p><code>sh
export AWS_ACCESS_KEY_ID=imnottellingimnottelling
export AWS_SECRET_ACCESS_KEY=myfavoritefoodissushi
</code></p>

<h3>.bashrc</h3>

<p><code>sh
source ~/.secrets
</code></p>

<p>And now you can safely push your <code>.bashrc</code> up to Github.</p>

<p>&hellip;after you create a little repo for your <a href="/blog/2014/02/04/manage-your-dotfiles-with-git/">dotfiles</a>, that is! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find And Replace From Outside Of Files]]></title>
    <link href="http://MProuts.github.io/blog/2014/09/13/find-and-replace-from-outside-of-files/"/>
    <updated>2014-09-13T22:10:03-04:00</updated>
    <id>http://MProuts.github.io/blog/2014/09/13/find-and-replace-from-outside-of-files</id>
    <content type="html"><![CDATA[<p>Toss this puppy in your <code>.bashrc</code> for string substitution from
outside of files.</p>

<p><code>sh
function ack_sub {
  ack -l $1 $3 | xargs perl -pi -E 's/'$1'/'$2'/g'
}
</code></p>

<h3>Syntax</h3>

<blockquote><p><code>ack_sub &lt;target&gt; &lt;substitution&gt; &lt;directory&gt;</code></p></blockquote>

<h3>Example</h3>

<p><code>sh
$ ack_sub "Mikey" "Michael" "./taxes"
</code></p>
]]></content>
  </entry>
  
</feed>
