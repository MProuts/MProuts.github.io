<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Full Stack Snacks]]></title>
  <link href="http://MProuts.github.io/atom.xml" rel="self"/>
  <link href="http://MProuts.github.io/"/>
  <updated>2014-02-26T00:45:49-05:00</updated>
  <id>http://MProuts.github.io/</id>
  <author>
    <name><![CDATA[Michael Prouty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[7 Colloquialisms From Code]]></title>
    <link href="http://MProuts.github.io/blog/2014/02/24/7-coding-coloqualisms/"/>
    <updated>2014-02-24T15:19:09-05:00</updated>
    <id>http://MProuts.github.io/blog/2014/02/24/7-coding-coloqualisms</id>
    <content type="html"><![CDATA[<p>Beyond specific technical jargon (&ldquo;loop,&rdquo; &ldquo;thread,&rdquo; &ldquo;iteration&rdquo;), the language of programming languages is rich in strange historical colloquialisms.  Here are 8 you might not know&hellip;</p>

<h2>Spaghetti Code: </h2>

<p><strong><em>noun</em></strong> 1. pejoritave term for code whose flow of execution is muddled, often associated with poor usage of the GOTO keyword. <em>I was going to give her write access to my repo, but I hear she writes spaghetti code.</em></p>

<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/9/93/Spaghetti.jpg" width="300" height="300">
<img src="images/fortran.png" width="400" height="400"></p>

<p><strong>See also</strong>:
<a href="http://en.wikipedia.org/wiki/Spaghetti_code#Ravioli_code">Ravioli Code</a>,
<a href="http://en.wikipedia.org/wiki/Spaghetti_code#Lasagna_code">Lasagna Code</a>,
<a href="http://en.wikipedia.org/wiki/Spaghetti_code#Spaghetti_with_meatballs">Spaghetti With Meatballs Code</a>,
<a href="http://en.wikipedia.org/wiki/Spaghetti_code#Macaroni_code">Macaroni Code</a></p>

<h2>Syntactic Sugar:</h2>

<p><strong><em>noun</em></strong>
1. optional syntax in a programming language that makes code more readable,
   consice or otherwise sweeter for the humans that interact with it. <em>I take my
   [syntactic] sugar with coffee and cream.</em></p>

<p><img class="left" src="http://www.usafutures.com/sugar_trading_broker.jpg" width="300" height="300"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Salty</span>
</span><span class='line'><span class="k">def</span> <span class="nf">keep_parantheses</span><span class="p">(</span><span class="n">on</span><span class="p">);</span> <span class="k">end</span>
</span><span class='line'><span class="o">[].</span><span class="n">&lt;</span><span class="o">&lt;</span><span class="p">(</span><span class="s2">&quot;Something&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span><span class="n">%</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Sweet</span>
</span><span class='line'><span class="k">def</span> <span class="nf">leave_parentheses</span> <span class="n">off</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="o">[]</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;Something Else&quot;</span>
</span><span class='line'><span class="mi">4</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">4</span> <span class="o">%</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Duck Typing</h2>

<p><strong><em>noun</em></strong>
1. A style of dynamic typing where an object&rsquo;s type is defined by what it can do
   rather than what it <em>is</em> (i.e. its class).</p>

<p><strong>etymology:</strong>
From the popular saying, &ldquo;If it looks like a duck and quacks like a duck, it must
be a duck.&rdquo;</p>

<p><img class="left" src="http://www.stanford.edu/dept/CTL/cgi-bin/academicskillscoaching/wp-content/uploads/2012/07/baby-duck.jpg" width="300" height="300"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="p">;</span> <span class="s2">&quot;quack!&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="p">;</span> <span class="s2">&quot;woofquack!&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ducks</span> <span class="o">=</span> <span class="o">[</span><span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">]</span>
</span><span class='line'><span class="n">ducks</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">duck</span><span class="o">|</span> <span class="n">duck</span><span class="o">.</span><span class="n">quack</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;quack!&quot;, &quot;woofquack!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Duck Punching</h2>

<p><strong><em>noun</em></strong>
1. Modifying code at runtime (e.g. overriding methods, attributes) without
   changing the underlying source code.</p>

<p><strong>etymology:</strong>
From the popular saying, &ldquo;If it looks like a duck, but barks like a dog at runtime, you
must have punched it.&rdquo; ;)</p>

<p><img class="left" src="http://www.justindlevine.com/wp-content/uploads/2013/11/duck-1.jpg" width="300" height="300"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="p">;</span> <span class="s2">&quot;quack!&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># later, at runtime...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="p">;</span> <span class="s2">&quot;woof, ouch!&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">quack</span>
</span><span class='line'><span class="c1">#=&gt; &quot;woof, ouch!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Twiddle-Wakka</h2>

<p><strong>noun</strong>
1. Mysterious squiggle-carrot operator (also known as the pessimistic operator) used to
specify versions in ruby Gemfiles.
<em>I see your twiddle-wakka, and raise you a scope resolution operator.</em></p>

<p><img class="left" src="http://MProuts.github.io/images/twiddle.png" width="300" height="300"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Highest version &gt;= 3.2.1 and &lt; 3.3.0</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sapphire&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Highest version &gt;= 2.1 and &lt; 2.2</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;diamond&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Shaving A Yak</h2>

<p><strong><em>gerandial noun</em></strong>
1. The state of being engaged in an activity that is remotely related to the original
task at hand, often after a long chain of troubleshooting digressions. <em>I intended to shave a yak, but pretty soon, I was filing my taxes.</em></p>

<p><img class="left" src="http://a-z-animals.com/media/animals/images/original/yak9.jpg" width="320" height="320"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_dinner</span>
</span><span class='line'>  <span class="n">buy_ingredients</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">buy_ingrediens</span>
</span><span class='line'>  <span class="n">earn_money</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">earn_money</span>
</span><span class='line'>  <span class="n">shave_yak</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">shave_yak</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;Gross, what am I even doing?&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Easter Egg</h2>

<p><strong>noun</strong>
1. Inside jokes and other funny superfluous tidbits intentionally left in source code by
developers for other developers to find.</p>

<p><img class="left" src="http://MProuts.github.io/images/easter-egg.png" width="285" height="285"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">hidden_treasure</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="no">ALL</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'><span class="c1">#      .-&quot;-.</span>
</span><span class='line'><span class="c1">#    .&#39;=^=^=&#39;.</span>
</span><span class='line'><span class="c1">#   /=^=^=^=^=\</span>
</span><span class='line'><span class="c1">#  :^= HAPPY =^;      Can you spot the Easter egg</span>
</span><span class='line'><span class="c1">#  |^ EASTER! ^|       in this source code?</span>
</span><span class='line'><span class="c1">#  :^=^=^=^=^=^:  </span>
</span><span class='line'><span class="c1">#   \=^=^=^=^=/</span>
</span><span class='line'><span class="c1">#    `.=^=^=.&#39;</span>
</span><span class='line'><span class="c1">#      `~~~`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parameters vs. Arguments]]></title>
    <link href="http://MProuts.github.io/blog/2014/02/09/parameters-vs-arguments/"/>
    <updated>2014-02-09T13:20:04-05:00</updated>
    <id>http://MProuts.github.io/blog/2014/02/09/parameters-vs-arguments</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;The beginning of wisdom is to call things by their proper names.&rdquo;</p>

<p>-Confucius</p></blockquote>

<p>Why are two concepts so basic to everything we do with computers so hard for most of us to differentiate?  The short answer is that it&rsquo;s often not a useful distinction, so we abstract it out of our thought processes in order to make room for other things.  The long answer follows.  (Read on, interested reader!)</p>

<p>In order to understand why the distinciton feels unnatural, we first have to understand the distinction itself.  Here goes:</p>

<h3>Parameters</h3>

<p>Parameters exist in <em>method declarations</em>.  They are placeholders for what later gets passed into the method.  Syntactically, they say &ldquo;something goes here.&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">plate_food</span><span class="p">(</span><span class="n">plate_goes_here</span><span class="p">,</span>  <span class="n">food_goes_here</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># code to place food on plate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>plate_goes_here</code> and <code>food_goes_here</code> are parameters.</p>

<h3>Arguments</h3>

<p>Arguments, on the other hand, exist in method <em>calls</em>.   They <strong>are</strong> the actual things that get passed to a method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_plate</span> <span class="o">=</span> <span class="n">plate</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;porcelain&quot;</span>
</span><span class='line'><span class="n">some_food</span> <span class="o">=</span> <span class="n">food</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;kimchi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">plate_food</span><span class="p">(</span><span class="n">my_plate</span><span class="p">,</span> <span class="n">some_food</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>my_plate</code> and <code>some_food</code> are arguments.</p>

<h3>How They&rsquo;re Related</h3>

<p>In programming, methods are for storing behavior.  We &ldquo;parameterize&rdquo; methods in order to allow them to interact with data without having to specify that data.  That way, we can use the method over and over again, passing in different pieces of data at our whim.  <em>Parameters</em> act as placeholders in the method definition for hard data that is passed as <em>arguments</em> every time the method is actually invoked.</p>

<blockquote><p>parameter:hypothetical::argument:concrete</p></blockquote>

<h3>The Confusing Part&hellip;</h3>

<p>This distinction becomes murky as soon as we begin our programming careers, because we tend to name our placeholders (logically) for the things that will eventually take their place.</p>

<p>To return to the previous example, instead of naming our parameters <code>plate_goes_here</code> and <code>food_goes_here</code>, we go with <code>plate</code> and <code>food</code> instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">plate_food</span><span class="p">(</span><span class="n">plate</span><span class="p">,</span>  <span class="n">food</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># code to place food on plate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And just like that, the seam we intentionally dug out earlier has been rehidden.  And hidden it remains for 99.999% of our programming careers.</p>

<p>A particularly explicit example of this placetaker-for-placeholder conflation is literally a convention in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">clean_plates</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">plate</span><span class="o">|</span> <span class="n">plate</span><span class="o">.</span><span class="n">wash</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we literally name our parameter &ldquo;args.&rdquo;   <em>Could</em> these concepts be less practically distinct, I ask you?</p>

<h3>&hellip;And Is Understanding This <em>All</em> That Important?</h3>

<p>Practically, probably not.</p>

<p>If you have a bent for philosophy or linguistics, this is the type of conceptual relationship you might explore further in an introductory course in <a href="http://en.wikipedia.org/wiki/Semiotics">semiotics</a> or <a href="http://en.wikipedia.org/wiki/Semantics">semantics</a>.</p>

<p>But my sense is that this distinction is muddled in most higher-level applied programming <em>by design</em>.  After all, given the option to hide a conceptual layer from ourselves, most programmers take it without even thinking about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Your Dotfiles With Git]]></title>
    <link href="http://MProuts.github.io/blog/2014/02/04/manage-your-dotfiles-with-git/"/>
    <updated>2014-02-04T22:55:48-05:00</updated>
    <id>http://MProuts.github.io/blog/2014/02/04/manage-your-dotfiles-with-git</id>
    <content type="html"><![CDATA[<p>After spending an unreasonable amount of time tinkering with <code>LSCOLORS</code> and <code>PS1</code> in my <code>.bash_profile</code> (think blinking pink unicode coffee cup), I made a typo and broke the file.  The error was deep inside my long, opaque <code>PS1</code> string, and I eventually decided to scrap the broken version and start over.  I also decided to put my dotfiles under version control.</p>

<p>This turned out to be a little trickier than I expected&hellip;</p>

<h2>Separate Your Dots</h2>

<p>The first problem I encountered is that your system expects dotfiles to live in your home directory at paths like <code>~/.vimrc</code>. This isn&rsquo;t a great place for a git repository because, well, that&rsquo;s where <em>ALL</em> of the rest of your user files live.  On the other hand, if you move them into their own directory,</p>

<pre><code>$ mkdir ~/dotfiles/
$ mv ~/.bash_profile /dotfiles/bash_profile
</code></pre>

<p>they will no longer be accessible to programs that use them to load your customization.</p>

<h2>Symlinks</h2>

<p>Enter symlinks.  Symlinks basically let you create a named pointer (or <em>symbolic link</em>) to a file at a different location in the file system.  When the system tries to open this pointer, it will link to the target file, and open that instead.  In our case, this means that we can stash all of our resource files in <code>~/dotfiles</code> and create links to make them accessible to programs looking for them in <code>~/</code>. Here&rsquo;s the line of code that makes that happen.</p>

<pre><code>$ ln -s /dotfiles/bash_profile ~/.bash_profile
</code></pre>

<p>This is basically just saying:
&ldquo;Create a link from stashed file <code>/dotfiles/bash_profile</code> to its original location at <code>~/.bash_profile</code>.  (I decided to remove the dot from the stashed file for convenience.)</p>

<h2>Git It!</h2>

<p>With the symlink in place, our <code>bash_profile</code> should now be working from its new location.  (Note: You may need to close and reopen terminal to see a change). All that&rsquo;s left to do is initialize our git repo and make our first commit.</p>

<pre><code>$ cd ~/dotfiles
$ git init
$ git add .
$ git commit -m "Initial commit"
</code></pre>

<h2>Syntax Highlighting</h2>

<p>You&rsquo;ll notice that as a side effect of moving our <code>bash_profile</code>, we no longer get pretty syntax highlighting when we open it in an editor.</p>

<p>  <strong>dotfiles/bash_profile</strong></p>

<pre><code>PATH="/Applications/Postgres.app/Contents/MacOS/bin:$PATH"

CDPATH=~/dev/

[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

export PS1="\W ☕ "
export GREP_OPTIONS='--color=always'
export LSCOLORS="GxGxBxDxCxEgEdxbxgxcxd"
</code></pre>

<p>The solution is to explicitly tell the editor the file type (a shell script) by appending <code>.sh</code> to the filename.</p>

<p>  <strong>dotfiles/bash_profile.sh</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/Applications/Postgres.app/Contents/MacOS/bin:$PATH&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CDPATH</span><span class="o">=</span>~/dev/
</span><span class='line'>
</span><span class='line'><span class="o">[[</span> -s <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span> <span class="c"># Load RVM into a shell session *as a function*</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;\W ☕ &quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GREP_OPTIONS</span><span class="o">=</span><span class="s1">&#39;--color=always&#39;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LSCOLORS</span><span class="o">=</span><span class="s2">&quot;GxGxBxDxCxEgEdxbxgxcxd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aaaaah. Much better.</p>

<h2>Generate Symlinks with a Script</h2>

<p>Great, so now version control and syntax hightlighting are working, but we&rsquo;ve introduced another problem.  Namely, it&rsquo;s a pain to manually maintain these symlinks.  As your list of dotfiles grows, or when you change computers, it would be nice to have a way to dynamically generate links to these stashed resource files. Solution: write a little shell script to link all of the files in <code>/dotfiles</code> to the home directory for you.  I just threw this in the same directory.</p>

<p><strong>linkdotfiles.sh</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">dir</span><span class="o">=</span>~/dotfiles          <span class="c"># dotfiles directory</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>file in <span class="nv">$dir</span>/*; <span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> <span class="k">$(</span>basename <span class="nv">$file</span> .sh<span class="k">)</span> !<span class="o">=</span> <span class="s2">&quot;linkdotfiles&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Linking&quot;</span> <span class="k">$(</span>basename <span class="nv">$file</span><span class="k">)</span> <span class="s2">&quot;...&quot;</span>
</span><span class='line'>    ln -s <span class="nv">$file</span> ~/.<span class="k">$(</span>basename <span class="nv">$file</span> .sh<span class="k">)</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;... all done!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run:</p>

<pre><code>$ sh linkdotfiles.sh
</code></pre>

<p>All done.  :)</p>
]]></content>
  </entry>
  
</feed>
